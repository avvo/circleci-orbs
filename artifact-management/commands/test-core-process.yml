description: Implements commands to run default Ruby version tests, or
  multiple test with Ruby versions specified through ruby_versions parameter.
parameters:
  bundler_1_version:
    description: The precise Bundler 1.x version that should be used
      for "bundle install" and the actual test command.
    type: string
    default: 1.17.3
  bundler_2_version:
    description: The precise Bundler 2.x version that should be used
      for "bundle install" and the actual test command.
    type: string
    default: 2.1.4
  bundler_install_command:
    description: The command that should be used to run bundle installtions.
    type: string
    default: bundle install
  test_dir:
    description: The directory in which the tests should run.
    type: string
    default: .
  post_test_conditions:
    description: Steps that must be true after all test steps. For example
      if you need to create test reports.
    type: steps
    default: []
  post_test_command:
    description: Command that will be executed after test_command. For
      example if you need to remove any residual file created by the test
      command. This command is executed for each Ruby version.
    type: string
    default: echo "No post test process command."
  pre_bundler_install_command:
    description: Command that will be executed before bundler_install_command.
      For example if you need to remove Gemfile.lock before "bundle install" is
      executed. This command is executed for each Ruby version.
    type: string
    default: echo "No pre bundler install command."
  pre_test_conditions:
    description: Steps that must be true before all test steps. For example
      if you need to install gems. This steps are executed once for all Ruby
      versions.
    type: steps
    default: []
  pre_test_command:
    description: Command that will be executed just before test_command. For
      example if you need to prepare test DB after "bundle install" and
      before "rake test"
    type: string
    default: echo "No pre test command."
  ruby_versions:
    description: The ruby versions to be used to run the test. If set, RVM is
      assumed to be installed and the install/test commands will be prefaced
      with rvm <<ruby_versions> do .... If unset (the default), the system
      ruby will be called directly.
    type: string
    default: ""
  test_command:
    default: bundle exec rake test
    description: The command that should be used to run tests.
    type: string
steps:
  - when:
      condition: <<parameters.ruby_versions>>
      steps:
        - steps: << parameters.pre_test_conditions >>

        - run:
            name: Install bundler gem
            command: |-
              set -e
              for v in $(echo "<<parameters.ruby_versions>>" | sed "s/,/ /g");
              do \
                MAJOR=$(echo $v | cut -f 1 -d'.')
                MINOR=$(echo $v | cut -f 2 -d'.')
                if [[ $MAJOR -ge 3 || ( $MAJOR -eq 2 && $MINOR -ge 7 ) ]];
                then
                  echo "Installing bundler version 2 for Ruby version $v"
                  rvm $v do gem install bundler --version=<<parameters.bundler_2_version>>
                else
                  echo "Installing bundler version 1 for Ruby version $v"
                  rvm $v do gem install bundler --version=<<parameters.bundler_1_version>>
                fi \
              done

        - run:
            name: Test process
            command: |-
              set -e
              cd <<parameters.test_dir>>
              for v in $(echo "<<parameters.ruby_versions>>" | sed "s/,/ /g");
              do \
                 echo "Test process for Ruby $v"
                 rvm $v do <<parameters.pre_bundler_install_command>>
                 rvm $v do <<parameters.bundler_install_command>>
                 rvm $v do <<parameters.pre_test_command>>
                 rvm $v do <<parameters.test_command>>
                 rvm $v do <<parameters.post_test_command>>
              done

        - steps: << parameters.post_test_conditions >>

  - unless:
     condition: <<parameters.ruby_versions>>
     steps:
       - steps: << parameters.pre_test_conditions >>

       - run:
           name: Install bundler gem
           command: |-
             set -e
             RUBY_VERSION=$(ruby --version | cut -f 2 -d' ')
             MAJOR=$(echo $RUBY_VERSION | cut -f 1 -d'.')
             MINOR=$(echo $RUBY_VERSION | cut -f 2 -d'.')
             if [[ $MAJOR -ge 3 || ( $MAJOR -eq 2 && $MINOR -ge 7 ) ]];
             then
               echo "Installing bundler version 2 for Ruby version $RUBY_VERSION"
               gem install bundler --version=<<parameters.bundler_2_version>>
             else
               echo "Installing bundler version 1 for Ruby version $RUBY_VERSION"
               gem install bundler --version=<<parameters.bundler_1_version>>
             fi

       - run:
           name: Test process
           command: |-
             set -e
             cd <<parameters.test_dir>>
             <<parameters.pre_bundler_install_command>>
             <<parameters.bundler_install_command>>
             <<parameters.pre_test_command>>
             <<parameters.test_command>>
             <<parameters.post_test_command>>

       - steps: << parameters.post_test_conditions >>
